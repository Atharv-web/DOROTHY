from crewai import Agent,Task,Crew,Process,LLM
# from langchain_community.tools import TavilySearchResults
from crewai.flow.flow import Flow,listen,start
import pandas as pd
from dotenv import load_dotenv
load_dotenv()  
import os

# Configuring both llms.
llm = LLM(
    model='ollama/llama3.2:1b',
    base_url = 'http://localhost:11434',
    temperature=0.3,
)

coder_llm = LLM(
    model='ollama/dorothy',
    base_url='http://localhost:11434',
    temperature=0.01,
)


report_prompt_template = """
Generate a technical report that strictly follows the format below:
1. Introduction:
   Provide an overview of the context and purpose of the generated solution.
2. Objective:
   Clearly state the problem statement as provided by the user, including any dataset details.
3. Tech used:
   List the programming languages, libraries, frameworks, and any other technologies used in the solution.
4. Code snippets:  
   Include key sections of the generated code (format these snippets as markdown code blocks).
5. Conclusion: 
   Summarize the solution, discuss its effectiveness, and suggest potential improvements or next steps.
"""

from docx import Document

OUTPUT_DIR_1 = 'C:/Users/Atharva/Desktop/PROJECTS/internship-clg'
OUTPUT_DIR_2 = 'InternFiles'

def save_doc(input_file,output_file):
    doc = Document()
    doc.add_heading("Project Report",level=1)

    with open(input_file,'r',encoding='utf-8') as f:
        lines = f.readlines()

    for line in lines:
        if line.strip():
            doc.add_paragraph(line)
    
    doc.save(os.path.join(OUTPUT_DIR_2, output_file))


report_task_path = os.path.join(OUTPUT_DIR_2,'report.md')
code_task_path = os.path.join(OUTPUT_DIR_1,'code_generated.txt')

def UsingDataset(user_query,df_summary):
    # agent 1
    coder_agent = Agent(
        role = "Senior Software Engineer",
        goal=f"Develop efficient solutions to solve {user_query}, here is a preview of the dataset: {df_summary}",
        backstory="Highly experienced and a software wizard, with a quench for building efficient code to solve problems.",
        llm = coder_llm,
        verbose=True,
    )

    coding_task = Task(
        description=f"Write a codebase or an algorithm based on this user query: {user_query}",
        expected_output=f"Efficiently written code in an organized format, that solves the {user_query} in the most efficient way.",
        agent=coder_agent,
    )

    # agent 2
    reportWriter = Agent(
        role="Report Writer",
        goal = "Write detail reports.",
        backstory="""
        You're a meticulous analyst with a keen eye for detail. You're known for
        your ability to turn complex data into clear and concise reports, making
        it easy for others to understand and act on the information you provide.
        """,
        llm=llm,
        verbose=True,
    )

    codereport_task = Task(
        description="Write a report that consists of only the code generated by coder_agent, without any additional explanation.",
        expected_output="A plain-text file containing just the generated code by coder_agent.",
        agent=reportWriter,
        output_file=code_task_path,
    )

    report_task = Task(
        description="Writing reports on the context you recieve from coder_agent.",
        expected_output=f"A detail report in the specified format: {report_prompt_template}.",
        agent=reportWriter,
        output_file=report_task_path,
    )

    crew = Crew(
        agents=[coder_agent,reportWriter],
        tasks= [coding_task,codereport_task,report_task],
        verbose = True,
        process=Process.sequential,
    )

    result = crew.kickoff()
    save_doc('report.md','report.docx')

def NotUsingDataset(user_query):

#   agent 1
    coder_agent = Agent(
        role = "Senior Software Engineer",
        goal=f"Develop efficient solutions to solve {user_query}.",
        backstory="Highly experienced and a software wizard, with a quench for building efficient code to solve problems.",
        llm = coder_llm,
        verbose=True,
    )

    coding_task = Task(
        description=f"Write a codebase or an algorithm based on the {user_query}",
        expected_output="Efficiently written code in an organized format.",
        agent=coder_agent,
    )

    # agent 2
    reportWriter = Agent(
        role="Report Writer",
        goal = "Write detail reports.",
        backstory="""
        You're a meticulous analyst with a keen eye for detail. You're known for
        your ability to turn complex data into clear and concise reports, making
        it easy for others to understand and act on the information you provide.
        """,
        llm=llm,
        verbose=True,
    )

    codereport_task = Task(
        description="Write a report that consists of only the code generated by coder_agent, without any additional explanation.",
        expected_output="A plain-text file containing just the generated code by coder_agent.",
        agent=reportWriter,
        output_file=code_task_path,
    )

    report_task = Task(
        description="Writing code reports on the context you recieve.",
        expected_output=f"A detail code report in the specified format: {report_prompt_template}.",
        agent=reportWriter,
        output_file=report_task_path,
    )

    crew = Crew(
        agents=[coder_agent,reportWriter],
        tasks= [coding_task,codereport_task,report_task],
        verbose = True,
        process=Process.sequential,
    )

    result = crew.kickoff()
    save_doc('report.md','report.docx')


def main():
    print("Hey, Welcome!! How can I be of service today Sir?")
    user_query = input("Enter ur query: ")
    data_query = input("You got a dataset??")
    if data_query == "yes":
        dataset_path = input("Enter the dataset path")
        df = pd.read_csv(dataset_path)
        df_summary = df.head(5).to_string(index = False)
        print(df_summary)
        UsingDataset(user_query,df_summary)
    else:
        print("Lets proceed then...")
        NotUsingDataset(user_query)

main()
